#!r6rs
(import (rnrs)
	(springkussen signature descriptor)
	(springkussen signature parameters)
	(springkussen signature rsa)
	(springkussen cipher asymmetric)
	(springkussen digest)
	(srfi :64)
	(testing))

(test-begin "RSA signature")

(define modulus #xF0C42DB8486FEB9595D8C78F908D04A9B6C8C77A36105B1BF2755377A6893DC4383C54EC6B5262E5688E5F9D9DD16497D0E3EA833DEE2C8EBCD1438389FCCA8FEDE7A88A81257E8B2709C494D42F723DEC2E0B5C09731C550DCC9D7E752589891CBBC3021307DD918E100B34C014A559E0E182AFB21A72B307CC395DEC995747)

(define public-key
  (key-factory:generate-key *key-factory:rsa*
   (make-rsa-public-key-parameter modulus #x010001)))
(define private-key
  (key-factory:generate-key *key-factory:rsa*
   (make-rsa-private-key-parameter 
    modulus
    #x2489108B0B6AF86BED9E44C2336442D5E227DBA55EF8E26A7E437194119077F003BC9C027852BB3126C99C16D5F1057BC8361DCB26A5B2DB4229DB3DE5BD979B2E597D1916D7BBC92746FC07595C76B44B39A476A65C86F086DC9283CA6D1EEFC14915982F9C4CED5F62A9FF3BE24218A99357B5B65C3B10AEB367E911EB9E21)))

(define (test-rsa-verifier key M S md verify)
  (let ((s (verifier-descriptor:init rsa-verifier-descriptor key
	    (make-signature-parameter
	     (make-signature-digest-parameter md)
	     (make-rsa-signature-verify-parameter verify)))))
    (verifier-descriptor:process! rsa-verifier-descriptor s M)
    (test-assert (verifier-descriptor:verify rsa-verifier-descriptor s S))))

(test-rsa-verifier public-key
		   #vu8(1)
		   (hex-string->bytevector "BAAB4843FB7B923928FCB414603F93919A14E959A496EBD500E4BA38A5C786F3232EED41B77CB6452CC464AC601CE25F03583BD6C6A331876966C2A9EF9F2E11AE2824C38D2DFA24BEADCD414E626AEE640A3E70E051A3C5859417CB333A15C96065944E73641E258A656CAA9D2026BF4EE088E489F85A0CB230A14FE945B1AA")
		   *digest:sha1*
		   pkcs1-emsa-v1.5-verify)
(test-rsa-verifier public-key
		   #vu8()
		   (hex-string->bytevector "33EED9F552004A6D83FC81BED4286C5DBACD7B0E6D8169BF67EBAE8A0D99AB60518632A04ACC73C090CE1EA965133FD65E8AFBC13155CC0E830836ECC7ECBE9AF3C2ACB94BA8F1D471938BB02AA0E575A8837835AD4B740782DBAC34F6DE96451FB19E22B4711D39F8D041DF883F9AB84324824E190E78675749CB0BDF6CBD45")
		   *digest:sha256*
		   pkcs1-emsa-v1.5-verify)

;; if verifier can verify the signature generated by the other library,
;; we can sort of trust our verifier. So signature can be verified like
;; this
(define (test-rsa-signer key pub-key bv)
  (define (sign)
    (let ((state (signer-descriptor:init rsa-signer-descriptor key)))
      (signer-descriptor:process! rsa-signer-descriptor state bv)
      (signer-descriptor:sign rsa-signer-descriptor state)))
  (define (verify S)
    (let ((state (verifier-descriptor:init rsa-verifier-descriptor pub-key)))
      (verifier-descriptor:process! rsa-verifier-descriptor state bv)
      (verifier-descriptor:verify rsa-verifier-descriptor state S)))
  (test-assert (verify (sign))))

(test-rsa-signer private-key public-key #vu8())
(test-rsa-signer private-key public-key #vu8(1))
(test-rsa-signer private-key public-key #vu8(1 2 3 4 5 6 7 8 9 0))

(test-end)
(exit (zero? (test-runner-fail-count (test-runner-current))))
